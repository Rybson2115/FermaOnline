using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace FermaOnline.Models
{
    public static class TemplateCurve
    {

        public static Dictionary<int, string> DefaultValuePig = new Dictionary<int, string>() { { 21, "5" }, { 22, "5.228571" }, { 23, "5.457143" }, { 24, "5.685714" },
            { 25, "5.914286" }, { 26, "6.142857" }, { 27, "6.371428" }, { 28, "6.6" }, { 29, "6.871428" }, { 30, "7.142857" }, { 31, "7.414286" }, { 32, "7.685714" },
            { 33, "7.957143" }, { 34, "8.228571" }, { 35, "8.5" }, { 36, "8.857142" }, { 37, "9.214286" }, { 38, "9.571428" }, { 39, "9.928572" }, { 40, "10.28571" },
            { 41, "10.64286" }, { 42, "11" }, { 43, "11.45714" }, { 44, "11.91429" }, { 45, "12.37143" }, { 46, "12.82857" }, { 47, "13.28571" }, { 48, "13.74286" },
            { 49, "14.2" }, { 50, "14.77143" }, { 51, "15.34286" }, { 52, "15.91429" }, { 53, "16.48571" }, { 54, "17.05714" }, { 55, "17.62857" }, { 56, "18.2" },
            { 57, "18.85714" }, { 58, "19.51429" }, { 59, "20.17143" }, { 60, "20.82857" }, { 61, "21.48571" }, { 62, "22.14286" }, { 63, "22.8" }, { 64, "23.57143" },
            { 65, "24.34286" }, { 66, "25.11429" }, { 67, "25.88571" }, { 68, "26.65714" }, { 69, "27.42857" }, { 70, "28.2" }, { 71, "29.08571" }, { 72, "29.97143" },
            { 73, "30.85714" }, { 74, "31.74286" }, { 75, "32.62857" }, { 76, "33.51429" }, { 77, "34.4" }, { 78, "35.3" }, { 79, "36.2" }, { 80, "37.1" }, { 81, "38" },
            { 82, "38.9" }, { 83, "39.8" }, { 84, "40.7" }, { 85, "41.62857" }, { 86, "42.55714" }, { 87, "43.48571" }, { 88, "44.41429" }, { 89, "45.34286" }, { 90, "46.27143" },
            { 91, "47.2" }, { 92, "48.14286" }, { 93, "49.08572" }, { 94, "50.02857" }, { 95, "50.97143" }, { 96, "51.91428" }, { 97, "52.85714" }, { 98, "53.8" },
            { 99, "54.75714" }, { 100, "55.71429" }, { 101, "56.67143" }, { 102, "57.62857" }, { 103, "58.58571" }, { 104, "59.54286" }, { 105, "60.5" }, { 106, "61.47143" },
            { 107, "62.44286" }, { 108, "63.41429" }, { 109, "64.38572" }, { 110, "65.35715" }, { 111, "66.32858" }, { 112, "67.3" }, { 113, "68.28571" }, { 114, "69.27143" },
            { 115, "70.25714" }, { 116, "71.24286" }, { 117, "72.22857" }, { 118, "73.21429" }, { 119, "74.2" }, { 120, "75.21429" }, { 121, "76.22857" }, { 122, "77.24286" },
            { 123, "78.25714" }, { 124, "79.27143" }, { 125, "80.28571" }, { 126, "81.3" }, { 127, "82.37143" }, { 128, "83.44286" }, { 129, "84.51429" }, { 130, "85.58572" },
            { 131, "86.65714" }, { 132, "87.72858" }, { 133, "88.8" }, { 134, "89.85715" }, { 135, "90.91428" }, { 136, "91.97143" }, { 137, "93.02857" }, { 138, "94.08572" },
            { 139, "95.14285" }, { 140, "96.2" }, { 141, "97.22857" }, { 142, "98.25714" }, { 143, "99.28571" }, { 144, "100.3143" }, { 145, "101.3429" }, { 146, "102.3714" },
            { 147, "103.4" }, { 148, "104.4143" }, { 149, "105.4286" }, { 150, "106.4429" }, { 151, "107.4571" }, { 152, "108.4714" }, { 153, "109.4857" }, { 154, "110.5" },
            { 155, "111.5" }, { 156, "112.5" }, { 157, "113.5" }, { 158, "114.5" }, { 159, "115.5" }, { 160, "116.5" }, { 161, "117.5" }, { 162, "118.4714" }, { 163, "119.4429" },
            { 164, "120.4143" }, { 165, "121.3857" }, { 166, "122.3571" }, { 167, "123.3286" }, { 168, "124.3" }, { 169, "125.2429" }, { 170, "126.1857" }, { 171, "127.1286" },
           { 172, "128.0714" }, { 173, "129.0143" }, { 174, "129.9571" }, { 175, "130.9" }, { 176, "131.8143" }, { 177, "132.7286" }, { 178, "133.6429" }, { 179, "134.5571" },
            { 180, "135.4714" }, { 181, "136.3857" } };//int-Dzień życia float-Masa ciała;//int-Dzień życia float-Masa ciała
        public static List<float> LiveTimeValue { get; set; } //dane wyliczane na podstawie średniej z doświadczeń 

        public static int CloseDayByValue(Dictionary<int, float> Dict, float GivenValue)
        {
            List<KeyValuePair<int, float>> DictList = Dict.ToList();
            var value = DictList.OrderBy(e => Math.Abs(e.Value - GivenValue)).FirstOrDefault();
            return value.Key;
        }


    }
}
