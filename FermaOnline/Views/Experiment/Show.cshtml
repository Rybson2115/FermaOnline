@model Experiment
@using FermaOnline.Models

<style>
    .hoverTable {
        width: 100%;
        border-collapse: collapse;
    }

        .hoverTable tr:hover {
            background-color: rgba(32, 60, 122, 0.1);
            color: #000;
        }
    .first {
        position: sticky;
        left: 0px;
        background-color: rgb(201, 76, 76);
    } /*dopracować*/
</style>

<div class="container p-3">
    <div class="row pt-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-primary btn-lg ">Back</a>
                    <h2 class="text-primary center">@Model.Name</h2>

                    <a type="button" class="btn btn-primary btn-lg" asp-controller="Survey" asp-route-Id="@Model.Id" asp-action="Create">Add survey</a>
                </div>

            </div>
            <div class="card-body">

                <div class="d-flex justify-content-between">
                    <p class="align-text-bottom"><span class="fw-bold">id:</span> @Model.Code </p>
                    @{var autor = String.IsNullOrEmpty(Model.Author) ? "" : $"<p><span class=\"fw-bold\" > Author:</span> {@Model.Author}</p>";
                        @Html.Raw(autor)
                    }
                </div>
                <div class="d-flex justify-content-center">
                    @{var TextSpecies = @Model.Status ? "This experiment is conduct on" : "This experiment was conducted on";
                        <p class="fst-italic">@TextSpecies @Model.Species</p>
                    }
                </div>
                <p class="fs-1 text ">Abstract:</p>
                <p>@Model.ShortDescription</p>

                <p class="fs-1 text ">Description:</p>
            </div>
        </div>
    </div>
    <br />

    @if (Model.SurveysList.Count != 0)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Table</h6>
            </div>
            <div class="card-body">
                <div class="table-responsive hoverTable">
                    <table class="table">
                        <thead class="thead-light">
                            <tr>
                                <th class="first">Data</th>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <th>@survey.SurveyDate.ToString("dd/MM/yyyy")</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="first"><b>Cage</b></td>
                                @{ char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
                                    @foreach (var survey in Model.SurveysList)
                                    {
                                        <td>
                                            <table class="table mb-0  table-borderless">
                                                <tr>
                                                    @for (int i = 0; i < Model.CageNumber; i++)
                                                    {
                                                        <td class="text-center">@alphabet[i] </td>
                                                    }
                                                </tr>
                                            </table>
                                        </td>
                                    }
                                }
                            </tr>
                            <tr>
                                <td class="first"><b>Loculus quantity </b></td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td class="text-center">@survey.LoculusQuantity </td>
                                }
                            </tr>
                            <tr>
                                <td class="first"><b>Cage quantity </b></td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td>
                                        <table class="table mb-0 table-borderless">
                                            <tr>
                                                @foreach (var cage in survey.Cages)
                                                {
                                                    <td class="text-center">@cage.CageQuantity</td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td class="first"><b>Group Weight</b> </td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td>
                                        <table class="table mb-0 table-borderless">
                                            <tr>
                                                @foreach (var cage in survey.Cages)
                                                {
                                                    <td class="text-center">@cage.GroupWeight </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                }
                            </tr>
                            @if (ViewBag.IsFirstSurvay)
                            {
                                <tr>
                                    <td class="first"><b>Days from first weight</b></td>
                                    @foreach (var survey in Model.SurveysList)
                                    {
                                        <td class="text-center">@survey.DaysFromFirstWeight </td>
                                    }
                                </tr>
                            }
                            <tr>
                                <td class="first"><b>Day Of Life</b></td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td class="text-center">@survey.DayOfLife </td>
                                }
                            </tr>
                            <tr>
                                <td class="first"><b>Individual body weight</b> </td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td>
                                        <table class="table mb-0 table-borderless">
                                            <tr>
                                                @foreach (var cage in survey.Cages)
                                                {
                                                    <td class="text-center">@cage.IndividualBodyWeight </td>
                                                }
                                            </tr>
                                        </table>
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td class="first"><b>Average body weight</b></td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td class="text-center">@survey.AverageBodyWeight </td>
                                }
                            </tr>
                            @{string Visible = Model.VisibleProperties;
                               

                                @if((char)Model.VisibleProperties[0] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Difference in body weight</b> </td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td>
                                                <table class="table mb-0 table-borderless">
                                                    <tr>
                                                        @foreach (var cage in survey.Cages)
                                                        {
                                                            <td class="text-center">@cage.DifferenceInBodyWeight </td>
                                                        }
                                                    </tr>
                                                </table>
                                            </td>
                                        }
                                    </tr>
                                }
                                @if((char)Model.VisibleProperties[1] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Weight gain from start</b> </td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td>
                                                <table class="table mb-0 table-borderless">
                                                    <tr>
                                                        @foreach (var cage in survey.Cages)
                                                        {
                                                            <td class="text-center">@cage.WeightGainFromStart </td>
                                                        }
                                                    </tr>
                                                </table>
                                            </td>

                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[2] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Average weight gain</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.AverageWeightGainFromCages </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[3] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Weight gain from last survey</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td>
                                                <table class="table mb-0 table-borderless">
                                                    <tr>
                                                        @foreach (var cage in survey.Cages)
                                                        {
                                                            <td class="text-center">@cage.WeightGainFromLastSurvey </td>
                                                        }
                                                    </tr>
                                                </table>
                                            </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[4] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Average weight gain from last survey</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.AverageWeightGainFromLastSurvey </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[5] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Loculus feed intake</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.LoculusFeedInTake </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[6] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Feed Intake Weekly</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.FeedIntakeWeekly </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[7] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>FeedIntakDaily</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.FeedIntakDaily </td>
                                        }
                                    </tr>
                                }
                                @if ((char)Model.VisibleProperties[8] == '1')
                                {
                                    <tr>
                                        <td class="first"><b>Feed Conversion Ratio</b></td>
                                        @foreach (var survey in Model.SurveysList)
                                        {
                                            <td class="text-center">@survey.FeedConversionRatio </td>
                                        }
                                    </tr>
                                }
                            }
                            <tr>
                                <td></td>
                                @foreach (var survey in Model.SurveysList)
                                {
                                    <td class="text-center">  <a asp-controller="Survey" asp-action="Delete" asp-route-Id="@survey.SurveyId" class="btn btn-danger mx-1">Delete</a></td>
                                }

                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        @if (Model.SurveysList.Count > 1)
        {
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h5 class="card-title">Charts</h5>
                    <ul class="nav nav-tabs card-header-tabs" id="myTab" data-bs-tabs="tabs">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="true" data-bs-toggle="tab" id="weightGainCard" href="#weightGain">Weight Gain</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" id="mortalityCard" href="#mortality">Mortality</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" id="treatmentyCard" href="#treatment">Treatment</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" id="fcrCard" href="#fcr">FCR</a>
                        </li>
                         @if ((char)Model.VisibleProperties[5] == '1'){
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" id="feedIntakeCard" href="#feedIntake">Feed Intake</a>
                        </li>
                        }
                    </ul>
                </div>
                <form class="card-body tab-content">
                    <div class="tab-pane active" id="weightGain">
                        <canvas id="weightGainChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                    </div>
                    <div class="tab-pane" id="mortality">
                     <canvas id="mortalityChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                      </div>
                    <div class="tab-pane" id="treatment">
                      <canvas id="treatmentChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                      </div>
                    <div class="tab-pane" id="fcr">
                      <canvas id="fcrChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                      </div>
                    <div class="tab-pane chart-line" id="feedIntake">
                     <canvas id="feedIntakeChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                      </div>
                      <hr>
                    <div class="d-flex justify-content-between">
                        <input type="checkbox" id="ChartType" data-toggle="toggle" data-on="Line" data-off="Bar" data-onstyle="warning" data-offstyle="info" checked>
                        <span class="fw-bold float-right"> BioDose own research @Model.Code.Substring(@Model.Code.Length - 4) </span>
                    </div>
                </form>
               </div>
           
             

            @*     <h6 class="m-0 font-weight-bold text-primary">Charts</h6>
                </div>
                <div class="card-body">
                    <div class="chart-line">
                        <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                        <canvas id="myChart" width="620" height="400" style="display: block; height: 320px; width: 496px;" class="chartjs-render-monitor"> </canvas>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between">
                    <input type="checkbox" id="ChartType" data-toggle="toggle" data-on="Line" data-off="Bar" data-onstyle="warning" data-offstyle="info" checked>
                    <span class="fw-bold float-right"> BioDose own research @Model.Code.Substring(@Model.Code.Length - 4) </span>
                </div>
 </div>
            </div>*@
  }

<script>
     var CurrentCard = 'weightGainCard'; 
      
        const alphabet = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];
           var Days = [];
            var Weight = [];
        
            var CageWeight = [];
             var CageMortality = [];

             for (let i = 0; i < @Model.CageNumber; i++) {
                for(let j = 0; j < @Model.SurveysList.Count(); j++) {
                    CageWeight[i] = [];
                    CageMortality[i] = [];
                }
            }
              var CageNumber=0;
        //konwersja danych z serwera 
           @{
                var dict = FermaOnline.Models.TemplateCurve.DefaultValuePig;
                @:CageNumber = @Model.CageNumber; 
                @for(var i = 0; i < Model.SurveysList.Count(); i++)
                {   
                    for(var j = 0; j< Model.SurveysList[i].Cages.Count(); j++) {   
                         @:CageWeight[@j][@i] = parseFloat(@Model.SurveysList[i].Cages[j].IndividualBodyWeight.ToString().Replace(",", "."));
                         @:CageMortality[@j][@i] = @Model.SurveysList[i].Cages[j].DeathCount;
                    }
                     @: Days.push(@Model.SurveysList[i].DayOfLife);
                    @: Weight.push(parseFloat(@dict[@Model.SurveysList[i].DayOfLife])); 
                
                }
            }
@* 
    class Chart {
  constructor(title, ChartData,MinMax,context,type) {
    this.title = title;
    this.ChartData = ChartData;
     this.MinMax = MinMax;
     this.context=context;
     this.type=type;
  }
  var config,chart;
 
  //obiekt dataset 
     const data = {
  labels: Days,
  datasets: [{
      data: Weight,
      label: "Standard curve",
      backgroundColor:"#ff0000",
      borderColor: "#ff0000",
      fill: false
    }]
    };

  // Getter
  get show() { //wyświetl
    return this.liczPole();
  }
  // Method
  add() {
   config = {
                type: 'line' ,
                data: data,
                options: {
                    title: {
                        display: true,
                        text: title
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                max: Math.floor(Math.max(...MinMax)+2.0),
                                min: Math.floor(Math.min(...MinMax)-1.0),
                                stepSize: 0.5
                            }
                        }]
                    }
                }
            }
   config.type = chartType;
  chart.update();
  
 //inicjalizacja chart
     chart = new Chart(context,config );
        //dodawanie dataset 

    for(var i = 0; i < CageNumber; i++){
      const data = chart.data;
      const newDataset = {
        label: 'Cage ' + alphabet[i],
        borderColor: "#" + ((1<<24)*Math.random() | 0).toString(16),
        backgroundColor: "#" + ((1<<24)*Math.random() | 0).toString(16),
        fill: false,
        data: ChartData,
      };
      config.data.datasets.push(newDataset);
      chart.update();
    }

    return chart
  }
    update() {
    chart.destroy();
      config.type = checkbox.checked ? 'line':'bar';
      chart = new Chart(context,config);
    return chart;
  }
}
  
*@

function WeightGainChart(chartType) {
    
   //zakres wartości
   var  MinMax =[];
   MinMax.push(Weight.at(0))
   MinMax.push(Weight.at(-1))
   for(var i = 0; i < CageNumber; i++){
   MinMax.push(CageWeight[i].at(0));
   MinMax.push(CageWeight[i].at(-1));
   }
  var title='Weight gain over time (G/DAYS)'

   //obiekt dataset 
     const data = {
  labels: Days,
  datasets: [{
      data: Weight,
      label: "Standard curve",
      backgroundColor:"#ff0000",
      borderColor: "#ff0000",
      fill: false
    }]
    };
   
    var config = {
                type: 'bar' ,
                data: data,
                options: {
                    title: {
                        display: true,
                        text: title
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                max: Math.floor(Math.max(...MinMax)+2.0),
                                min: Math.floor(Math.min(...MinMax)-1.0),
                                stepSize: 0.5
                            }
                        }]
                    }
                }
            }
 var context = document.getElementById('weightGainChart') 
  config.type = chartType;
  chart.update();
  
 //inicjalizacja chart
   var  chart = new Chart(context,config );

      //dodawanie dataset 

    for(var i = 0; i < CageNumber; i++){
      const data = chart.data;
      const newDataset = {
        label: 'Cage ' + alphabet[i],
        borderColor: "#" + ((1<<24)*Math.random() | 0).toString(16),
        backgroundColor: "#" + ((1<<24)*Math.random() | 0).toString(16),
        fill: false,
        data: CageWeight[i],
      };
      config.data.datasets.push(newDataset);
      chart.update();
    }
 }

function Charts(CurrentCard,type){
     switch (CurrentCard) {
      case 'weightGainCard':
         WeightGainChart(type); //tu robimy update
        break;
      case value2:
     
        break;
 
    }
}
//tworzenie charts
    Charts(CurrentCard,'line');
 
      const checkbox = document.getElementById('ChartType');
      checkbox.onchange  = function(element) {Charts(CurrentCard,checkbox.checked ? 'line':'bar');};

      document.getElementById('weightGainCard').onclick =function(element) {Charts(CurrentCard,type);};
      



        </script>
    }
    @if (Model.Files.Any(x => x.FileType == "Formula"))
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Nutrition Formula</h6>
            </div>
            <div class="card-body">


                @foreach (var file in Model.Files)
                {
                    if (file.FileType == "Formula")
                    {
                        <div class="d-flex justify-content-between">
                            <a href="~/@file.FilePath" target="_blank" class="btn" style="width:100%"><i class="far fa-eye"></i> View Formula: @file.Name</a> <!-- nie działa otwieranie w nowym oknie-->
                            <a asp-controller="File" asp-action="Delete" asp-route-Id="@file.Id" class="btn btn-danger mx-1">Delete</a>
                        </div>
                    }
                }
            </div>
        </div>
    }
    @if (Model.Files.Any(x => x.FileType == "Materials"))
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Materials and Methods</h6>
            </div>
            <div class="card-body">
                @foreach (var file in Model.Files)
                {
                    if (file.FileType == "Materials")
                    {
                        <div class="d-flex justify-content-between">

                            <a href="~/@file.FilePath">@file.Name</a>
                            <a asp-controller="File" asp-action="Delete" asp-route-Id="@file.Id" class="btn btn-danger mx-1">Delete</a>  <!-- nie można pobrać?-->
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

